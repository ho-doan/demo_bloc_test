// Mocks generated by Mockito 5.4.2 from annotations
// in bloc_ffff/test/feature/home/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc_ffff/core/data/models/entries.dart' as _i5;
import 'package:bloc_ffff/core/domain/use_cases/entries_use_case.dart' as _i3;
import 'package:bloc_ffff/feature/home/cubit/home_cubit.dart' as _i6;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EntriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockEntriesUseCase extends _i1.Mock implements _i3.EntriesUseCase {
  MockEntriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Exception, _i5.EntriesModel>> entries() =>
      (super.noSuchMethod(
        Invocation.method(
          #entries,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<Exception, _i5.EntriesModel>>.value(
            _FakeEither_0<Exception, _i5.EntriesModel>(
          this,
          Invocation.method(
            #entries,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<Exception, _i5.EntriesModel>>);
}

/// A class which mocks [HomeCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeCubit extends _i1.Mock implements _i6.HomeCubit {
  MockHomeCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.HomeState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i7.dummyValue<_i6.HomeState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.HomeState);

  @override
  _i4.Stream<_i6.HomeState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i6.HomeState>.empty(),
      ) as _i4.Stream<_i6.HomeState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> onInit() => (super.noSuchMethod(
        Invocation.method(
          #onInit,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void delete(int? index) => super.noSuchMethod(
        Invocation.method(
          #delete,
          [index],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i6.HomeState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i8.Change<_i6.HomeState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
